generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Courses {
  id String @id @default(uuid())
  title String @db.Text
  slug String @unique
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  int_price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Categories? @relation(fields: [categoryId], references: [id])

  attachements Attachements[]
  chapters Chapters[]
  faqs Faqs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])

}

model Categories{
  id String @id @default(uuid())
  name String @unique
  course Courses[]
}

model Attachements{
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])
  
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

}

model Faqs{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  position Int
  isPublished Boolean @default(false)

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([courseId])
}

model Chapters{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData MuxData[]
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([courseId])

}


model MuxData{
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapters Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)

}

model UserProgress{
  id String @id @default(uuid())
  userId String

  chapterId String
  chapters Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([chapterId])

  @@unique([userId,chapterId])
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phoneNumber   String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Country {
  id            Int @id @default(autoincrement())
  name          String
  countryCode   String
  capital       String?
  region        String?
  currency      String?
  flag          String?
  phoneCode     String?
  states        State[]
}

model State {
  id            Int  @id @default(autoincrement())
  name          String
  stateCode     String
  country       Country   @relation(fields: [countryId], references: [id])
  countryId     Int
  cities        City[]
}

model City {
  id            Int  @id @default(autoincrement())
  name          String
  state         State     @relation(fields: [stateId], references: [id])
  stateId       Int
}

