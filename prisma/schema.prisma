generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Courses {
  id String @id @default(uuid())
  title String @db.Text
  slug String @unique
  
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  int_price Float?

  duration String?
  mode String?
  certificate String?
  exams String?
  experienceLevel String?
  studyMaterial String?
  additionalBook String?
  language String?

  technologyRequirements String?
  eligibilityRequirements String?
  disclaimer  String?


  isPublished Boolean @default(false)

  categoryId String?
  category Categories? @relation(fields: [categoryId], references: [id])

  attachements Attachements[]
  chapters Chapters[]
  faqs Faqs[]
  item Item[]
  purchases Purchase[]
  faculties CourseFaculty[]
  


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])

}

model Categories{
  id String @id @default(uuid())
  name String @unique
  course Courses[]
}

model Attachements{
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])
  
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

}

model Faqs{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  position Int
  isPublished Boolean @default(false)

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([courseId])
}

model Chapters{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  muxData MuxData[]
  userProgress UserProgress[]
  

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([courseId])

}


model MuxData{
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapters Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)

}

model UserProgress{
  id String @id @default(uuid())
  userId String

  chapterId String
  chapters Chapters @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([chapterId])

  @@unique([userId,chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum UserRole{
  ADMIN
  USER
}

model User {
  id                    String    @id @default(cuid())
  registrationNumber    String?
  name                  String?
  email                 String?   @unique
  phoneNumber           String?   @unique
  qualification         String?
  profession            String?
  bio                   String? @db.Text
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole @default(USER)
  accounts              Account[]
  order                 Order[]
  billingAddress        BillingAddress[]
  shippingAddress       ShippingAddress[]
  isTwoFactorEnabled    Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt             DateTime @default(now())
  updateAt              DateTime @updatedAt
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String @id @default(cuid())
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Country {
  id            Int @id @default(autoincrement())
  name          String
  countryCode   String
  capital       String?
  region        String?
  currency      String?
  flag          String?
  phoneCode     String?
  states        State[]
}

model State {
  id            Int  @id @default(autoincrement())
  name          String
  stateCode     String
  country       Country   @relation(fields: [countryId], references: [id])
  countryId     Int
  cities        City[]
}

model City {
  id            Int  @id @default(autoincrement())
  name          String
  state         State     @relation(fields: [stateId], references: [id])
  stateId       Int
}

enum PaymentStatus{
  Processing
  Paid
  Failed
  Success
  Cancelled
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  item        Item[]


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String    @id @default(cuid())
  orderId       String? @unique
  subTotal      Float?
  taxTotal      Float?
  totalAmount   Float?
  currency      String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(Processing)
  items         Item[]
  sameAsBilling Boolean @default(true)  
  
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

}
model Item {
  id          String   @id @default(cuid())
  orderId     String?
  order       Order? @relation(fields: [orderId], references: [id])


  itemName    String
  quantity    Int @default(1)
  price       Float?
  int_price   Float?
  type        String?   
  courseId    String?
  productId   String?
  course      Courses? @relation(fields: [courseId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BillingAddress {
  id         String @id @default(cuid())
  userId     String
  user       User @relation(fields: [userId], references: [id])
  country    String
  state      String
  city       String
  address    String @db.Text
  zip        String
}

model ShippingAddress {
  id         String @id @default(cuid())
  userId     String
  user       User @relation(fields: [userId], references: [id])
  country    String
  state      String
  city       String
  address    String @db.Text
  zip        String
}

model Career{
  id                String      @id @default(cuid())
  name              String
  email             String
  phoneNumber       String?
  qualification     String?
  country           String?
  state             String?
  city              String?
  zip               String?
  bio               String?
  positionApplied   String?
  resume            String?
}

model Testimonials{
  id          String @id @default(cuid())
  studentName String
  title       String?
  description String?
  location    String?
  imageUrl    String?
  videoUrl    String?
  isPublished Boolean @default(false)

  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

}

model Faculty{
  id String @id @default(cuid())
  name String
  shortDescription   String?
  description String? @db.Text
  imageUrl    String?
  isPublished Boolean @default(false)

  courses  CourseFaculty[]

  
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseFaculty {
  id       String   @id @default(cuid())
  courseId String
  facultyId String
  course   Courses  @relation(fields: [courseId], references: [id])
  faculty  Faculty  @relation(fields: [facultyId], references: [id])
}